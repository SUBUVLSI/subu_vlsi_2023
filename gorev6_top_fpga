

`timescale 1ns / 1ps


module gorev6_test 
    #(parameter max_row     = 76800,
                c_clkfreq   = 100_000_000,
                c_baudrate  = 115_200)
       (
        input   wire    clk_i,
        input   wire    i_Rx_Serial,
        input   wire    i_wenable,
        input   wire    i_renable,
        input   wire    veri_1,
        output  wire    o_Tx_Serial,   
        output  reg     led_tx,
        output  reg     led_rx
        );
    
    //tx
    reg         i_Tx_start;
    reg [7:0]   i_Tx_Byte = 0;
    wire        o_Tx_Done;
    wire        o_Tx_Active;
    
    //rx
    wire        o_Rx_done;
    wire [7:0]  o_Rx_Byte; 
    
    // RAM1
    reg en_ram1;
    reg we_ram1;
    reg [16:0] addr_ram1;
    reg [7:0] data_i_ram1;
    wire [7:0] data_o_ram1;
    
    // RAM2
    reg en_ram2;
    reg we_ram2;
    reg [16:0] addr_ram2;
    reg [7:0] data_i_ram2;
    wire [7:0] data_o_ram2;
    
    integer ind = 0, indis = 0;
    wire veri_gonder, veri_al;
    reg en_gorev6;
    reg [7:0] veri_i_gorev6;
    wire [7:0] veri_o_gorev6;
    wire islem_bitti;
    wire [5:0] durum_oku;
    wire [16:0] indis_kontrol;
    
    //reg [7:0] cikti_mem [0:max_row-1];
    //reg [7:0] cikti [0:63];
    
    integer gec = 0;
    
    reg [20:0] cntr = 0;
    reg [3:0] drm = 4'b0000;
    reg [20:0] counter = 0;
    reg [9:0] state = 10'b00_0000_0000;
    
    
    
    localparam idle                 = 10'b00_0000_0000;
    localparam ram_write            = 10'b00_0000_0001;
    localparam ram_read             = 10'b00_0000_0010;
    localparam ram_transmit         = 10'b00_0000_0100;
    localparam altmodul_gonder_1    = 10'b00_0000_1000;
    localparam altmodul_gonder_2    = 10'b00_0001_1111;
//    localparam altmodul_al_1        = 10'b00_0010_0000;
//    localparam altmodul_al_2        = 10'b00_0100_0000;
     
     
     
    always @(posedge (clk_i)) begin
        
        case (state)

            idle:   begin
                        i_Tx_start  <= 0;
                        addr_ram1   <= 0;
                        indis       <= 0;
                        led_tx      <= 1'b0;
                        led_rx      <= 1'b0;
                        state       <= ram_write;
                end

            ram_write:  begin
                        
                        if(i_wenable) begin //switch
                             
                             
                           if(o_Rx_done) begin
                                en_ram1 <= 1'b1;
                                we_ram1 <= 1'b1;
                               data_i_ram1  <= o_Rx_Byte;
                               addr_ram1    <= indis;
                               indis        <= indis + 1;
                               counter      <= counter +1;
                           end 
                           
                           if(counter == max_row) begin ///mem_satir+1
                                led_rx      <= 1'b1;
                                led_tx      <= 1'b0;
                                addr_ram1   <= ind;
                                en_ram1     <= 1'b1;
                                we_ram1     <= 1'b0;
                                indis       <= 0;
                                en_gorev6   <= 1'b1;
                                state       <= altmodul_gonder_1;
                            end 
                        end 
                end
            
            altmodul_gonder_1:begin
                // IFLERI AYIR
                if(veri_al == 1 && ind < max_row)begin
                    state <= 13;
                end else begin
                    ind <= 0;
                    en_ram2 = 1;
                    we_ram2 = 1;
                    addr_ram2 = 0;
                    state <= 14;
                end 
            end 
            
            13:begin
               if(gec <11)begin // 2
                   gec <= gec + 1;
                   veri_i_gorev6 <= data_o_ram1;
               end else begin
                   ind <= ind + 1;
                   gec <= 0;
                   state <= altmodul_gonder_2;
               end 
            end 
            
            altmodul_gonder_2:begin
                addr_ram1 <= ind;
                state <= altmodul_gonder_1;
            end
            /////////////////////////////////////////
            14:begin
                if(islem_bitti == 1 && veri_gonder == 1)begin
                    state <= 15;
                end else begin
                     
                end 
            end
            
            15:begin
                if(indis < max_row)begin
                    state <= 16;
                end else begin
                    indis <= 0;
                    ind <= 0;
                    en_ram2 = 0;
                    we_ram2 = 0; // okuma
                    addr_ram2 = ind; 
                    
                    state <= ram_read;
                end
                
            end 
            16:begin
                if(indis < 1)begin
                    state <= 17;
                end else begin
                    state <= 18;
                end
            end 
            
            17:begin
                if(gec < 8)begin  
                    gec <= gec + 1;
                    en_ram2 = 1;
                    we_ram2 = 1; // yazma
                    data_i_ram2 <= veri_o_gorev6;
                end else begin
                    gec <= 0;
                    indis <= indis + 1;
                    state <= 19;
                end
            end 
            
            18:begin
                if(gec < 2)begin  
                    gec <= gec + 1;
                    en_ram2 = 1;
                    we_ram2 = 1; // yazma
                    data_i_ram2 <= veri_o_gorev6;
                end else begin
                    gec <= 0;
                    indis <= indis + 1;
                    state <= 19;
                end
            end 
            
            19:begin
                addr_ram2 <= indis;
                state <= 15;
            end
            
            ram_read: 
                begin
                    led_tx <= 1'b1;
                    if(i_renable) begin
                        en_ram2  <= 1'b1;
                        we_ram2  <= 1'b0;
                        addr_ram2   <= 0;
                        state       <= ram_transmit;
                    end
                end
            
            ram_transmit:
                begin
                        
                        case (drm)
                        
                        0:  begin
                                en_ram2 <= 1'b1;
                                we_ram2 <= 1'b0;
                                drm     <= 4'b0011;
                            end
                            
                        1:  begin
                                if(cntr < max_row) begin 
                                    i_Tx_start  <= 1'b1;
                                    i_Tx_Byte   <= data_o_ram2;
                                    drm         <= 4'b0100;
                                    
                                end else begin
                                    i_Tx_start  <= 0;
                                    en_ram2     <= 1'b0;
                                    we_ram2     <= 1'b0;
                                    addr_ram2   <= 0;
                                    state       <= idle;
                                    led_tx      <= 0;
                                end
                            end    
                                
                        2:  begin
                                    i_Tx_start  <= 1'b0;
                                    cntr        <= cntr +1;  
                                    drm         <= 4'b0001;    
                            end  
                            
                        3:  begin
                                
                                drm <= 4'b0001;
                                
                            end
                            
                        4:  begin
                                i_Tx_start <= 0;
                                if(o_Tx_Done) begin
                                    addr_ram2   <= addr_ram2 + 1; 
                                    drm         <= 4'b0010;
                               end 
                            end
                      endcase
                      
                end
            default: state <= idle;
        endcase
        
    end
   
   
   // 8 bitlik ram / 76800 satır
    ram#(.V(8),.S(76800),.A(17)) RAM1(
        .clk_i(clk_i),
        .en_i(en_ram1),
        .we_i(we_ram1),
        .address_i(addr_ram1),
        .data_i(data_i_ram1),
        .data_o(data_o_ram1)
    );
    
    gorev_6 GOREV6(
    .clk_i(clk_i),
    .rst_i(rst_i),
    .en_i(en_gorev6),
    .veri_i(veri_i_gorev6),
    .veri_o(veri_o_gorev6),
    .veri_al_o(veri_al),   
    .veri_gonder_o(veri_gonder),
    .islem_bitti_o(islem_bitti)
    );
   
    
//     8 bitlik ram / 76800 satır
    ram#(.V(8),.S(76800),.A(17)) RAM2(
        .clk_i(clk_i),
        .en_i(en_ram2),
        .we_i(we_ram2),
        .address_i(addr_ram2),
        .data_i(data_i_ram2),
        .data_o(data_o_ram2)
    );
    
   uart_tx_t 
    #(
        .c_clkfreq  (c_clkfreq),
        .c_baudrate (c_baudrate)
    )
    uart_tx_ram
    (
        .i_clk         (clk_i),
        .i_Tx_start    (i_Tx_start),	
        .i_Tx_Byte     (i_Tx_Byte),
        .o_Tx_Active   (o_Tx_Active),		
        .o_Tx_Serial   (o_Tx_Serial),   
        .o_Tx_Done     (o_Tx_Done)
    );

    uart_rx_t
    #(   
        .c_clkfreq   (c_clkfreq),
        .c_baudrate  (c_baudrate)     
    )
    uart_rx_ram
    (
        .i_clk          (clk_i),
        .i_Rx_Serial    (i_Rx_Serial),    	
        .o_Rx_done      (o_Rx_done),		
        .o_Rx_Byte 		(o_Rx_Byte)
    );
   
endmodule


